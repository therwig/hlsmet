-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity met_hw_acos_table4_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of met_hw_acos_table4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "11111111", 2 to 3=> "11111110", 4 => "11111101", 5 to 6=> "11111100", 
    7 => "11111011", 8 to 9=> "11111010", 10 => "11111001", 11 to 12=> "11111000", 
    13 to 14=> "11110111", 15 => "11110110", 16 to 17=> "11110101", 18 => "11110100", 
    19 to 20=> "11110011", 21 => "11110010", 22 to 23=> "11110001", 24 => "11110000", 
    25 to 26=> "11101111", 27 to 28=> "11101110", 29 => "11101101", 30 to 31=> "11101100", 
    32 => "11101011", 33 to 34=> "11101010", 35 => "11101001", 36 to 37=> "11101000", 
    38 => "11100111", 39 to 40=> "11100110", 41 to 42=> "11100101", 43 => "11100100", 
    44 to 45=> "11100011", 46 => "11100010", 47 to 48=> "11100001", 49 => "11100000", 
    50 to 51=> "11011111", 52 => "11011110", 53 to 54=> "11011101", 55 => "11011100", 
    56 to 57=> "11011011", 58 => "11011010", 59 to 60=> "11011001", 61 => "11011000", 
    62 to 63=> "11010111", 64 => "11010110", 65 to 66=> "11010101", 67 to 68=> "11010100", 
    69 => "11010011", 70 to 71=> "11010010", 72 => "11010001", 73 to 74=> "11010000", 
    75 => "11001111", 76 to 77=> "11001110", 78 => "11001101", 79 => "11001100", 
    80 to 81=> "11001011", 82 => "11001010", 83 to 84=> "11001001", 85 => "11001000", 
    86 to 87=> "11000111", 88 => "11000110", 89 to 90=> "11000101", 91 => "11000100", 
    92 to 93=> "11000011", 94 => "11000010", 95 to 96=> "11000001", 97 => "11000000", 
    98 to 99=> "10111111", 100 => "10111110", 101 => "10111101", 102 to 103=> "10111100", 
    104 => "10111011", 105 to 106=> "10111010", 107 => "10111001", 108 to 109=> "10111000", 
    110 => "10110111", 111 => "10110110", 112 to 113=> "10110101", 114 => "10110100", 
    115 to 116=> "10110011", 117 => "10110010", 118 => "10110001", 119 to 120=> "10110000", 
    121 => "10101111", 122 => "10101110", 123 to 124=> "10101101", 125 => "10101100", 
    126 to 127=> "10101011", 128 => "10101010", 129 => "10101001", 130 to 131=> "10101000", 
    132 => "10100111", 133 => "10100110", 134 to 135=> "10100101", 136 => "10100100", 
    137 => "10100011", 138 to 139=> "10100010", 140 => "10100001", 141 => "10100000", 
    142 => "10011111", 143 to 144=> "10011110", 145 => "10011101", 146 => "10011100", 
    147 to 148=> "10011011", 149 => "10011010", 150 => "10011001", 151 => "10011000", 
    152 to 153=> "10010111", 154 => "10010110", 155 => "10010101", 156 => "10010100", 
    157 to 158=> "10010011", 159 => "10010010", 160 => "10010001", 161 => "10010000", 
    162 => "10001111", 163 to 164=> "10001110", 165 => "10001101", 166 => "10001100", 
    167 => "10001011", 168 => "10001010", 169 to 170=> "10001001", 171 => "10001000", 
    172 => "10000111", 173 => "10000110", 174 => "10000101", 175 => "10000100", 
    176 => "10000011", 177 to 178=> "10000010", 179 => "10000001", 180 => "10000000", 
    181 => "01111111", 182 => "01111110", 183 => "01111101", 184 => "01111100", 
    185 => "01111011", 186 => "01111010", 187 => "01111001", 188 => "01111000", 
    189 => "01110111", 190 to 191=> "01110110", 192 => "01110101", 193 => "01110100", 
    194 => "01110011", 195 => "01110010", 196 => "01110001", 197 => "01110000", 
    198 => "01101111", 199 => "01101110", 200 => "01101101", 201 => "01101100", 
    202 => "01101010", 203 => "01101001", 204 => "01101000", 205 => "01100111", 
    206 => "01100110", 207 => "01100101", 208 => "01100100", 209 => "01100011", 
    210 => "01100010", 211 => "01100001", 212 => "01100000", 213 => "01011110", 
    214 => "01011101", 215 => "01011100", 216 => "01011011", 217 => "01011010", 
    218 => "01011000", 219 => "01010111", 220 => "01010110", 221 => "01010101", 
    222 => "01010011", 223 => "01010010", 224 => "01010001", 225 => "01001111", 
    226 => "01001110", 227 => "01001101", 228 => "01001011", 229 => "01001010", 
    230 => "01001000", 231 => "01000111", 232 => "01000101", 233 => "01000100", 
    234 => "01000010", 235 => "01000000", 236 => "00111111", 237 => "00111101", 
    238 => "00111011", 239 => "00111010", 240 => "00111000", 241 => "00110110", 
    242 => "00110100", 243 => "00110010", 244 => "00110000", 245 => "00101101", 
    246 => "00101011", 247 => "00101000", 248 => "00100110", 249 => "00100011", 
    250 => "00100000", 251 => "00011100", 252 => "00011001", 253 => "00010100", 
    254 => "00001110", 255 => "00000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity met_hw_acos_table4 is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of met_hw_acos_table4 is
    component met_hw_acos_table4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    met_hw_acos_table4_rom_U :  component met_hw_acos_table4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


